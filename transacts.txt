// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;
// import "hardhat/console.sol";

contract transactions{

    struct User{
        string password;
        string role;
    }
    mapping (address => User) public users;


    struct Transaction{
        address receiverAddress;
        address senderAddress;
        uint transactionSum;
        bool activeTransaction;
        bool moneyWasSended;
        string codeWord;
        string category_name;
        uint attemptsQty;
        bool confirmedByWord;
        bool safetyTransactionStatus;
        bool confirmedByAdmin;
        string transationDescription;

    }

    Transaction[] public transactionsHistory;

    struct Pattern{
        string patternName;
        uint8[] arrayOfSums;
    }
    struct Category{
        string category_name;
        Pattern[] patterns;
    }
        // Pattern[] public patterns;

    Category[] public cats;
    
    // uint balance;
    mapping(string => mapping(string => uint[])) public categories;

    // Category[] public categories;
    string[] public categories_names;
    string[][] public patterns_names;
    uint[][][] public patterns_sums;

    struct Promotion{
        address promoted;
        address[] votes;
        bool active;
    }
    Promotion[] public promotions;

    uint public qtyAdmins;

    error CustomError();

    constructor() payable{
        users[0xa16ca17882E03119c5F01AcBb529b3C85d505549] = User("1234","admin");
        users[0xA6C119313024fB92a85da609546Dfe12adD95E1A] = User("1234","admin");

        users[0xa48215Cca2BB0865e335e559E2a4903adc5bBf99] = User("1234","user");
        users[0xCAd3a65Cd52C08Fabc3F6D7fD9F2C1F4015540E0] = User("1234","user");
        users[0xD291cD1BC470A27D1F5155082dAeCA3725A91Ed0] = User("1234","user");

        qtyAdmins = 2;
        
        // balance = msg.value;
        // uint[] arr = [10,30,50];
        // uint8[] memory arr = new uint[](3);
        // Pattern memory pat = Pattern("present",[10,30,50]);
        // cats.push(Category("private_transfer",[pat]));

        // Pattern memory pat = Pattern("present",arr);
        // categories.push(Category("private_transfer",patterns.push(Pattern("present",[10,30,50]))));
        categories["Private Transfer"]["present"] = [10,30,50];
        // categories_names.push(["private_transfer"]);
        // categories_names[0][0] = ("present");

    
        categories["Rent Payment"]["apartment_payment"] = [70,90];
        // categories_names[1].push("rent_payment");
        // categories_names[1][0] = ("apartment_payment");

        categories["Private Settlement"]["debt_payment"] = [10];
        // categories_names[2].push("private_settlement");
        // categories_names[2][0] = ("debt_payment");

        categories_names.push("Private Transfer");
        categories_names.push("Rent Payment");
        categories_names.push("Private Settlement");

        patterns_names.push(["present"]);
        patterns_names.push(["apartment_payment"]);
        patterns_names.push(["debt_payment"]);

        patterns_sums.push([[10,30,50]]);
        patterns_sums.push([[70,90]]);
        patterns_sums.push([[10]]);


        
    }

    function getCatNames() public view returns(string[] memory){
        return(categories_names);
    }
     function getPatNames() public view returns(string[][] memory){
        return(patterns_names);
    }
     function getPatSums() public view returns(uint[][][] memory){
        return(patterns_sums);
    }

    function registration(address adr, string memory password) public{
        require (keccak256(bytes(users[adr].role)) == keccak256(bytes("")) ,"this user is registred already" );

        users[adr].role = "user";
        users[adr].password = password;

    }

    function changeRole(address changingUserAddress) public{
        require (keccak256(bytes (users[msg.sender].role)) == keccak256("admin"), "you are not an admin");
        require (keccak256(bytes (users[changingUserAddress].role)) == keccak256("admin"), "This user is admin already");

        users[changingUserAddress].role = "admin";
    }

    function createTransaction(address receiverAddress, uint transactionSum, string memory category_name, string memory codeWord, bool safetyTransactionStatus, string memory transationDescription) public payable {
        // require(address(msg.sender).balance > transactionSum, "not enough money");
        // require(balance > transactionSum, "not enough money on the contract");
        require(keccak256(bytes(users[msg.sender].role)) == keccak256(bytes("user")) || keccak256(bytes(users[msg.sender].role)) == keccak256(bytes("admin")), "this user is unregistred");
        require (receiverAddress != msg.sender, "you can't send money to yourself");
        // require (address(msg.sender).balance > transactionSum, "you don't have enough money to execute a transaction"); 
        transactionsHistory.push(Transaction(receiverAddress, msg.sender, transactionSum, true, false, codeWord, category_name, 3, false, safetyTransactionStatus,false, transationDescription));
    }
    function receiveTransaction(uint idTransaction, string memory enteredCodeWord ) public payable{
        require(transactionsHistory[idTransaction].activeTransaction == true, "This transaction is not active");
        require (transactionsHistory[idTransaction].receiverAddress == msg.sender, "You are not a reciever of this transaction");
        if (transactionsHistory[idTransaction].safetyTransactionStatus == true){
            require (transactionsHistory[idTransaction].confirmedByAdmin == true, "This transaction is not confirmed by admin");
        }
        // require (keccak256(bytes(transactionsHistory[idTransaction].codeWord)) == keccak256(enteredCodeWord)), "Code word is not valid");
        if ((keccak256(bytes(transactionsHistory[idTransaction].codeWord)) == keccak256(bytes(enteredCodeWord)))){
            payable (transactionsHistory[idTransaction].receiverAddress).transfer(transactionsHistory[idTransaction].transactionSum);
            transactionsHistory[idTransaction].moneyWasSended = true;
            transactionsHistory[idTransaction].confirmedByWord = true;
            transactionsHistory[idTransaction].activeTransaction = false;
        } else{
            if(transactionsHistory[idTransaction].attemptsQty != 0){
                transactionsHistory[idTransaction].attemptsQty--;
            } else{
                payable (transactionsHistory[idTransaction].senderAddress).transfer(transactionsHistory[idTransaction].transactionSum);
                transactionsHistory[idTransaction].activeTransaction = false;
                transactionsHistory[idTransaction].moneyWasSended = false;
                transactionsHistory[idTransaction].confirmedByWord = false;
            }
            
        }
    }

    function cancelTransaction(uint idTransaction) public payable{
        require( transactionsHistory[idTransaction].senderAddress == msg.sender, "You are not a sender of this transaction");
        require( transactionsHistory[idTransaction].activeTransaction == true, "This transaction is not active");

        payable(msg.sender).transfer(transactionsHistory[idTransaction].transactionSum);

        transactionsHistory[idTransaction].activeTransaction = false;
        transactionsHistory[idTransaction].moneyWasSended = false;
        transactionsHistory[idTransaction].confirmedByWord = false;

    }
    
    function confirmTransaction(uint idTransaction) public{
        require(keccak256( bytes (users[msg.sender].role)) == keccak256( bytes("admin")), "You are not an admin");
        require(transactionsHistory[idTransaction].safetyTransactionStatus == true, "This transaction doesn't requires confirmarmation by the admin");
        require(transactionsHistory[idTransaction].senderAddress != msg.sender, "You can't confirm your own transaction");
    
        transactionsHistory[idTransaction].confirmedByAdmin = true;
        uint procentToAdmin = ((transactionsHistory[idTransaction].transactionSum) / 1000)*1;
        payable(msg.sender).transfer(procentToAdmin);
        transactionsHistory[idTransaction].transactionSum -= procentToAdmin;
    }
    
    function startPromotionVoting(address voted) public{
        require(keccak256(bytes(users[msg.sender].role)) == keccak256(bytes("admin")), "you are not an admin");
        address[] memory arr;
        // arr[0] = msg.sender;
        promotions.push(Promotion(voted,arr,true));
    }
    function toVote(uint idPromotion) public{
        require(keccak256(bytes(users[msg.sender].role)) == keccak256(bytes("admin")), "you are not an admin");
        require(promotions[idPromotion].active == true, "this is votion is already finished");
        for(uint i=0; i < promotions[idPromotion].votes.length; i++){
            if(promotions[idPromotion].votes[i] == msg.sender){
                revert ("You already have voted");
                // return;
            }
           
        }
                promotions[idPromotion].votes.push(msg.sender);
          
                if(promotions[idPromotion].votes.length  == qtyAdmins ){
                    users[promotions[idPromotion].promoted].role = "admin";
                    promotions[idPromotion].active = false;
                    qtyAdmins++;
                    return;
                }        
    }

    function getPromotionArr() public view returns(Promotion[] memory){
        return promotions;
    }
    function getTransactionsHistoryArr() public view returns(Transaction[] memory){
        return transactionsHistory;
    }
    function getUser(address userAdr ) public view returns (User memory){
        return (users[userAdr]);
    }

    function getBalance() public view returns (uint){
        return(address(msg.sender).balance);
    }
     function getContractBalance(address adr) public view returns (uint){
        return(address(adr).balance);
    }

    function returnMsgValue() public payable returns(uint){
        return(msg.value);
    }
    function getPatternArray(string memory category, string memory pattern) public view returns(uint[] memory){
        return(categories[category][pattern]);
            }

    function createNewCategory(string memory categ_name) public{
        require (keccak256(bytes(users[msg.sender].role)) == keccak256(bytes("admin")), "you are not an admin");
        categories_names.push(categ_name);
    }
    // function createNewPattern (uint id_categ, string memory pat_name) public{
    //     patterns_names[id_categ].push(pat_name);
    // }
    // function createNewPatternSums(uint id_categ, uint id_pattern, uint[] memory sums) public{
    //     patterns_sums[id_categ][id_pattern].push(sums);
    // }
}